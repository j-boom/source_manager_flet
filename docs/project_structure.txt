SOURCE MANAGER FLET APPLICATION - PROJECT STRUCTURE
=================================================

This document contains the complete directory and file structure of the Source Manager Flet application 
after cleanup and optimization. The application is a desktop GUI built with Python Flet for managing 
research sources and project citations.

ENTRY POINT:
- Application entry point: src/main.py
- Launch command: flet run src/main.py

PROJECT STRUCTURE:
==================

source_manager_flet/
├── .gitignore                                    # Git ignore rules
├── requirements.txt                              # Python dependencies
│
├── config/                                       # Configuration modules
│   ├── __init__.py                              # Package exports
│   ├── app_config.py                            # Application constants
│   ├── data_models.py                           # Data class definitions
│   ├── enums.py                                 # Enumeration types
│   ├── logging_config.py                        # Logging configuration
│   ├── project_types_config.py                  # Project type definitions
│   ├── regional_sources_config.py               # Regional source configurations
│   └── source_types_config.py                   # Source type configurations
│
├── data/                                         # Application data storage
│   ├── __init__.py                              # Package marker
│   ├── Directory_Source_Citations/              # Project data directory
│   │   └── ROW/                                 # Regional folder (Rest of World)
│   │       └── 1234/                           # Customer number folder
│   │           ├── 1234512314 Second Sample Project/
│   │           │   └── Sample Document - 2025.json
│   │           └── 1234567890 Sample Project Folder/
│   │               └── 1234567890 - 2025 - FCR - 2025.json
│   └── user_data/                               # User configuration data
│       └── users/
│           └── jim.json                         # User settings file
│
├── docs/                                         # Documentation
│   ├── COMPLETE_APPLICATION_DOCUMENTATION.md    # Comprehensive app documentation
│   ├── PROJECT_COMPLETE_SUMMARY.md             # Project summary
│   ├── PROJECT_METADATA_CONFIGURATION.md       # Metadata configuration guide
│   ├── README.md                                # Project readme
│   └── project_structure.txt                   # This file
│
├── logs/                                         # Application logs
│   ├── errors.log                               # Error logs
│   └── source_manager.log                       # Application logs
│
└── src/                                          # Source code
    ├── __init__.py                              # Package marker
    ├── main.py                                  # Application entry point
    │
    ├── controllers/                             # Application controllers
    │   ├── __init__.py                          # Package exports
    │   └── app_controller.py                    # Main application controller
    │
    ├── models/                                  # Data models and managers
    │   ├── __init__.py                          # Package exports
    │   ├── navigation_manager.py                # Navigation state management
    │   ├── project_state_manager.py             # Project state management
    │   ├── settings_manager.py                  # Application settings
    │   ├── theme_manager.py                     # UI theme management
    │   ├── user_config.py                       # User configuration
    │   └── window_manager.py                    # Window state management
    │
    ├── services/                                # Business logic services
    │   ├── __init__.py                          # Package marker
    │   ├── directory_service.py                 # Directory operations
    │   └── project_creation_service.py          # Project creation logic
    │
    └── views/                                   # User interface components
        ├── __init__.py                          # Package exports
        ├── base_view.py                         # Base view class
        ├── main_view.py                         # Main application shell
        │
        ├── components/                          # Reusable UI components
        │   ├── dialogs/                         # Dialog components
        │   │   ├── __init__.py                  # Package marker
        │   │   ├── edit_display_name_dialog.py  # Name editing dialog
        │   │   ├── first_time_setup_dialog.py   # First-time setup
        │   │   ├── folder_creation_dialog.py    # Folder creation dialog
        │   │   └── project_creation_dialog.py   # Project creation dialog
        │   │
        │   ├── forms/                           # Form components
        │   │   └── dynamic_form_generator.py    # Dynamic form creation
        │   │
        │   └── source_ui_factory.py             # Source UI component factory
        │
        └── pages/                               # Application pages/views
            ├── __init__.py                      # Package exports
            ├── home_view.py                     # Home page
            ├── recent_projects_view.py          # Recent projects list
            ├── reports_view.py                  # Reports and exports
            ├── sources_view.py                  # Source library management
            │
            ├── new_project_view/                # New project creation
            │   ├── __init__.py                  # Package marker
            │   └── new_project_view.py          # Project browser and creator
            │
            └── project_view/                    # Project workspace
                ├── __init__.py                  # Package marker
                ├── project_view.py              # Project view container
                │
                └── tabs/                        # Project view tabs
                    ├── __init__.py              # Package marker
                    ├── cite_sources.py          # Citation management
                    ├── project_metadata.py      # Project metadata editing
                    └── project_sources.py       # Project source management

ARCHITECTURE OVERVIEW:
=====================

1. ENTRY POINT & INITIALIZATION:
   - src/main.py: Sets up logging, configures Flet page, initializes AppController
   - Handles application icon, window configuration, and error handling

2. CORE CONTROLLER:
   - AppController: Central orchestrator managing all components
   - Initializes managers, handles navigation, coordinates view lifecycle
   - Manages callbacks between components

3. MANAGERS (src/models/):
   - UserConfigManager: User preferences and settings persistence
   - ThemeManager: UI theme and color management
   - WindowManager: Window state and positioning
   - NavigationManager: Page routing and navigation state
   - SettingsManager: Application settings coordination
   - ProjectStateManager: Current project data management

4. SERVICES (src/services/):
   - DirectoryService: File system operations and project discovery
   - ProjectCreationService: Project creation workflow

5. VIEW HIERARCHY:
   - MainView: Application shell (app bar, navigation rail, content area)
   - BaseView: Common view functionality and patterns
   - Page Views: Specific application screens
   - Components: Reusable UI elements (dialogs, forms, factories)

6. CONFIGURATION (config/):
   - Data models with JSON serialization
   - Application constants and settings
   - Type definitions and enumerations
   - Logging configuration

NAVIGATION FLOW:
===============

Home → New Project → Project Browser → Project Selection → Project View
  ↓       ↓              ↓                ↓                    ↓
Recent  Settings      Folder Nav     JSON Loading         Tabbed Interface
Projects                                                 (Metadata|Sources|Citations)

DATA FLOW:
=========

1. User interactions → AppController
2. AppController → Managers (state updates)
3. Managers → Services (business logic)
4. Services → Data persistence (JSON files)
5. State changes → View updates via callbacks

KEY FEATURES:
============

- Modern Flet-based desktop GUI
- Multi-level folder navigation
- Project creation and management
- Source library with categorization
- Citation management
- Theme customization
- User preference persistence
- Comprehensive logging
- Error handling and recovery
- Responsive layout design

DEPENDENCIES:
============

See requirements.txt for complete dependency list. Key dependencies:
- flet: Desktop GUI framework
- Standard Python libraries for file I/O, JSON, logging, etc.

LAUNCH INSTRUCTIONS:
==================

1. Install dependencies: pip install -r requirements.txt
2. Run application: flet run src/main.py
3. Application will create necessary directories and configuration files
4. First-time setup dialog will appear for new users

This structure represents a clean, maintainable Flet application with proper separation 
of concerns, comprehensive error handling, and a scalable architecture.
